
from rest_framework.decorators import api_view
from rest_framework.response import Response
from api.serializers import NoticeSerializer
from api.models import Notice

@api_view(['GET'])
def getRoutes(request):
    routes = [
       {
           'Endpoint': '/notes/',
           'method': 'GET',
           'body': None,
           'description': 'Returns an array of notes'
       },
       {
           'Endpoint': '/notes/id',
           'method': 'GET',
           'body': None,
           'description': 'Returns a single note object'
       },
       {
           'Endpoint': '/notes/create/',
           'method': 'POST',
           'body': {'body': ""},
           'description': 'Creates a new note with data sent in the body'
       },
       {
           'Endpoint': '/notes/id/update/',
           'method': 'PUT',
           'body': {'body': ""},
           'description': 'Updates an existing note with data sent in the body'
       },
       {
           'Endpoint': '/notes/id/delete/',
           'method': 'DELETE',
           'body': None,
           'description': 'Deletes an existing note'
       }
    ]
    return Response(routes)

@api_view(['GET'])
def getNotices(request):
    notices = Notice.objects.all()
    serializer = NoticeSerializer(notices, many=True)
    return Response(serializer.data)


@api_view(['GET'])
def getNotice(request, pk):
    notice = Notice.objects.get(id=pk)
    serializer = NoticeSerializer(notice, many=False)
    return Response(serializer.data)

# @api_view(['POST'])
# def createNotice(request):
#     data = request.data
#     notice = Notice.objects.create(
#         title=data['title'],
#         content=data['content'],
#         featured_image=data['featured_image'],
#         author=request.user
#     )
#     serializer = NoticeSerializer(notice, many=False)
#     return Response(serializer.data)

from rest_framework.parsers import MultiPartParser, FormParser
from rest_framework import generics

class NoticeCreateView(generics.CreateAPIView):
    queryset = Notice.objects.all()
    serializer_class = NoticeSerializer
    parser_classes = [MultiPartParser, FormParser]

@api_view(['PUT']) 
def updateNotice(request, pk):
    data = request.data

    notice = Notice.objects.get(id=pk)
    serializer = NoticeSerializer(notice, data=request.data)
    if serializer.is_valid():
        serializer.save()
    return Response(serializer.data)

@api_view(['DELETE']) 
def deleteNotice(request, pk):
   notice = Notice.objects.get(id=pk)
    note.delete()
    return Response('Note was deleted!')
